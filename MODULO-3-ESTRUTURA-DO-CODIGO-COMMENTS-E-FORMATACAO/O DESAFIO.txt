





AGORA QUE OLHAMOS TODAS AS REGRAS E EXEMPLOS,

DEVEMOS 





RESOLVER NOSSO DESAFIO...












--> É UM ARQUIVO ESCRITO EM PYTHON,...






O ARQUIVO TEM 1 POUCO DE CÓDIGO..










--> ELE VAI FALHAR...






--> VC PODE CONSERTAR ESSE ARQUIVO,


MAS A IDEIA PRINCIPAL É QUE 
VC 

DEVE 


CONSERTAR OS COMMENTS E FORMATTING NA FILE...












--> ALGUMAS COISAS PODEM SER MELHORADAS...










--> CERTO... DEVEMOS ANALISAR TODA A FILE...











ACHO QUE FICOU ASSIM:
















# (c) Maximilian Schwarzmüller / Academind GmbH //LEGAL DISCLAIMER -- ACCEPTABLE COMMENT
from os import path, makedirs
from pathlib import Path

class DiskStorage:
    def __init__(self, directory_name):
        self.storage_directory = directory_name
        
    def create_directory(self):
        if (not path.exists(self.get_directory_path())):
            makedirs(self.storage_directory)

    # Warning: Directory must exist in advance
    def insert_file(self, file_name, content):
        file = open(self.get_directory_path() / file_name, 'w')
        file.write(content)
        file.close()
        # Todo: Add proper error handling

    def get_directory_path(self):
        return Path(self.storage_directory)


log_storage = DiskStorage('logs')

log_storage.insert_file('test.txt', 'Test')















QUAL FOI O APPROACH DO PROFESSOR?



















--> PRIMEIRAMENTE, ELE DEIXOU OS LEGAL COMMENTS...












ELE TIROU OS MARKERS/DIVIDERS:







# (c) Maximilian Schwarzmüller / Academind GmbH

# *********
# Imports
# *********
from os import path, makedirs
from pathlib import Path

# *********
# Main
# *********
# A class which allows us to create DiskStorage instances
















--> removeu os markers...














-> 'A class which allows us to create DiskStorage instances'....









-> ESSE NÃO É UM COMENTÁRIO DE DOCUMENTATION... E NEM PRECISAMOS DELE...











--> o professor removeu esse comment...












mais para baixo, 3 outros comments:









'This must be called before a file is inserted':





















# (c) Maximilian Schwarzmüller / Academind GmbH //LEGAL DISCLAIMER -- ACCEPTABLE COMMENT
from os import path, makedirs
from pathlib import Path

class DiskStorage:
    def __init__(self, directory_name):
        self.storage_directory = directory_name
        
    def create_directory(self):
        if (not path.exists(self.get_directory_path())):
            makedirs(self.storage_directory)

    # Warning: Directory must exist in advance
    def insert_file(self, file_name, content):
        file = open(self.get_directory_path() / file_name, 'w')
        file.write(content)
        file.close()
        # Todo: Add proper error handling

    def get_directory_path(self):
        return Path(self.storage_directory)


log_storage = DiskStorage('logs')
log_storage.create_directory()
log_storage.insert_file('test.txt', 'Test')
















-> WARNINGS PODEM FAZER SENTIDO E SEREM ÚTEIS, MAS AQUI 

TEMOS 2 WARNINGS..










--> FAZ MAIS SENTIDO ADICIONAR O WARNING EM 'insert_file',



pq __ É MELHOR COLOCAR 1 WARNING NO LUGAR EM QUE NOSSO CÓDIGO VAI FALHAR,

se não seguirmos 

esse 


error...









--> MAS É CLARO QUE A MANEIRA CORRETA DE HANDLAR 
ISSO 

É _ _CHECAR__ PELA EXISTÊNCIA DE 1 FOLDER, E APENAS CONTINUAR 

SE O FOLDER EXISTIR...


















TODO COMMENTS ------> ADICIONAR ERROR HANDLING É UMA BOA IDEIA,






e mencionar que 'teremos de fazer isso' é uma boa ideia...














----> formatting --> já temos 




spacing entre todos os methods,

e também
temos spacing lá embaixo...












----> MAS A PARTE DE BAIXO PODE FICAR SEM SPACING,

pq as linhas pertencem 

juntas:




log_storage = DiskStorage('logs')
log_storage.create_directory()
log_storage.insert_file('test.txt', 'Test')











certo... 








podemos seguir qualquer 1 das 2 approaches... 













-> O RESTO DOS METHODS ESTÃO CORRETOS...








-> MAS O HORIZONTAL SPACING ESTÁ BOM?













-> há espaço para alguns pequenos improvements:







        file = open(self.get_directory_path() / file_name, 'w')












ESSA LINHA NÃO É SUPER LONGA,


mas podemos MELHORÁ-LA...






basta escrever assim:















# (c) Maximilian Schwarzmüller / Academind GmbH //LEGAL DISCLAIMER -- ACCEPTABLE COMMENT
from os import path, makedirs
from pathlib import Path

class DiskStorage:
    def __init__(self, directory_name):
        self.storage_directory = directory_name
        
    def create_directory(self):
        if (not path.exists(self.get_directory_path())):
            makedirs(self.storage_directory)

    # Warning: Directory must exist in advance
    def insert_file(self, file_name, content):
        file_path = self.get_directory_path() / file_name
        file = open(file_path, 'w')
        file.write(content)
        file.close()
        # Todo: Add proper error handling

    def get_directory_path(self):
        return Path(self.storage_directory)


log_storage = DiskStorage('logs')
log_storage.create_directory()
log_storage.insert_file('test.txt', 'Test')
























certo....







ficou assim:





    # Warning: Directory must exist in advance
    def insert_file(self, file_name, content):
        file_path = self.get_directory_path() / file_name
        file = open(file_path, 'w')
        file.write(content)
        file.close()
        # Todo: Add proper error handling















POR FIM, PARA CONSERTAR ESSA FILE,


podemos 

chamar 


'log_storage.create_directory()'











TIPO ASSIM:




# (c) Maximilian Schwarzmüller / Academind GmbH //LEGAL DISCLAIMER -- ACCEPTABLE COMMENT
from os import path, makedirs
from pathlib import Path

class DiskStorage:
    def __init__(self, directory_name):
        self.storage_directory = directory_name
        
    def create_directory(self):
        if (not path.exists(self.get_directory_path())):
            makedirs(self.storage_directory)

    # Warning: Directory must exist in advance
    def insert_file(self, file_name, content):
        file_path = self.get_directory_path() / file_name
        file = open(file_path, 'w')
        file.write(content)
        file.close()
        # Todo: Add proper error handling

    def get_directory_path(self):
        return Path(self.storage_directory)


log_storage = DiskStorage('logs')

log_storage.create_directory()
log_storage.insert_file('test.txt', 'Test')















ex:











log_storage = DiskStorage('logs')

log_storage.create_directory()
log_storage.insert_file('test.txt', 'Test')










PQ TEMOS 2 OPERATIONS,



a operation de 'create the storage' 


e 
'realizar operations na storage'...








é assim que deixamos nosso código readable e maintainable...