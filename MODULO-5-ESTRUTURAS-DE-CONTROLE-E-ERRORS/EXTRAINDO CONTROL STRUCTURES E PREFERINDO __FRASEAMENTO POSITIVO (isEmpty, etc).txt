











OK... AGORA ADICIONAMOS GUARDS....








TEMOS MENOS NESTING NA NOSSA FUNCTION,

MAS AINDA ESTÁ RUIM...

















-> PODEMOS VER OUTRO PROBLEMA COM ESSE CÓDIGO...










É _A MISTURA__ DE LEVELS DE ABSTRACTION...












--> O QUE APRENDEMOS SOBRE FUNCTIONS AINDA 

SE APLICA...











-> QUANDO O ASSUNTO É O SIMPLIFY DE ESTRUTURAS DE CONTROLE,


E MANAGEAR 



ESTRUTURAS DE CONTROLE DEEPLY 


NESTED,








__  O SPLIT UP DE FUNCTIONS E O EXTRACT DE CONTROL STRUCTURES 


PARA 

DENTRO DE OUTRAS FUNCTIONS É OUTRO 

BUILDING BLOCK IMPORTANTE...









-> ISSO TUDO COMEÇA COM OS CHECKS..













-> RODAR OS CHECKS INLINE É MEIO RUIM..








--> é melhor fazer algo assim:











function processTransactions(transactions) {
  // COM 2 GUARDS:
  if (transactionsAreEmpty(transactions)) {
    // TODO - 1º GUARD (INVERTER O IF STATEMENT, as condições, e aí COLOCAR 1 RETURN STATEMENT NESSE BLOCK... AO MESMO TEMPO QUE COLOCAMOS TODA A LÓGICA QUE ESTAVA NESSE IF BLOCK __ DIRETAMENTE NO ELSE STATEMENT)...
    console.log('No transactions provided!');
    return;
  } else {
    for (const transaction of transactions) {
      if (transaction.status !== 'OPEN') {
        // 'open' era repetido nos 2 cases, de PAYMENT E DE REFUND
        // TODO - 2º GUARD (INVERTER O IF STATEMENT, as condições, e aí COLOCAR 1 ___CONTINUE___ (pq estamos em 1 loop, dentro desse if statement) STATEMENT NESSE BLOCK... AO MESMO TEMPO QUE COLOCAMOS TODA A LÓGICA QUE ESTAVA NESSE IF BLOCK __ DIRETAMENTE NO ELSE STATEMENT)...
        console.log('Invalid transaction type!', transaction);
        continue;
      }

      if (transaction.type === 'PAYMENT') {
        if (transaction.method === 'CREDIT_CARD') {
          processCreditCardPayment(transaction);
        } else if (transaction.method === 'PAYPAL') {
          processPayPalPayment(transaction);
        } else if (transaction.method === 'PLAN') {
          processPlanPayment(transaction);
        }
      } else if (transaction.type === 'REFUND') {
        if (transaction.method === 'CREDIT_CARD') {
          processCreditCardRefund(transaction);
        } else if (transaction.method === 'PAYPAL') {
          processPayPalRefund(transaction);
        } else if (transaction.method === 'PLAN') {
          processPlanRefund(transaction);
        }
      } else {
        console.log('Invalid transaction type!', transaction);
      }
    }
  }
}

function transactionsAreEmpty(transactions) {
  return !transactions || transactions.length === 0;
}

















certo... fazemos outsource disso 



em 1 function 



a parte... -> isso nos deixa usar 

POSITIVE WORDING..







(
    tipo 'transactionsAreEmpty'...
)













--> o professor diz que poderíamos colocar 


1 nome de 

'isEmpty()'...









MAS MINHA VERSÃO É QUASE A MESMA COISA, MAS MELHOR:










  if (transactionsAreEmpty(transactions)) {
    // TODO - 1º GUARD (INVERTER O IF STATEMENT, as condições, e aí COLOCAR 1 RETURN STATEMENT NESSE BLOCK... AO MESMO TEMPO QUE COLOCAMOS TODA A LÓGICA QUE ESTAVA NESSE IF BLOCK __ DIRETAMENTE NO ELSE STATEMENT)...
    console.log('No transactions provided!');
    return;

  }




--> 




'SE TRANSACTIONS ESTIVEREM EMPTY, RODE ESSE CONSOLE.LOG 
E RETORNE'..


















-> OK... MAS EU PODERIA TAMBÉM OUTSOURCEAR ESSE CONSOLE.LOG...













--> tipo assim:











function processTransactions(transactions) {
  // COM 2 GUARDS:
  if (transactionsAreEmpty(transactions)) {
    // TODO - 1º GUARD (INVERTER O IF STATEMENT, as condições, e aí COLOCAR 1 RETURN STATEMENT NESSE BLOCK... AO MESMO TEMPO QUE COLOCAMOS TODA A LÓGICA QUE ESTAVA NESSE IF BLOCK __ DIRETAMENTE NO ELSE STATEMENT)...
    outputError('No transactions provided!');
    return;
  } else {
    for (const transaction of transactions) {
      if (transaction.status !== 'OPEN') {
        // 'open' era repetido nos 2 cases, de PAYMENT E DE REFUND
        // TODO - 2º GUARD (INVERTER O IF STATEMENT, as condições, e aí COLOCAR 1 ___CONTINUE___ (pq estamos em 1 loop, dentro desse if statement) STATEMENT NESSE BLOCK... AO MESMO TEMPO QUE COLOCAMOS TODA A LÓGICA QUE ESTAVA NESSE IF BLOCK __ DIRETAMENTE NO ELSE STATEMENT)...
        outputError('Invalid transaction type!', transaction);
        continue;
      }

      if (transaction.type === 'PAYMENT') {
        if (transaction.method === 'CREDIT_CARD') {
          processCreditCardPayment(transaction);
        } else if (transaction.method === 'PAYPAL') {
          processPayPalPayment(transaction);
        } else if (transaction.method === 'PLAN') {
          processPlanPayment(transaction);
        }
      } else if (transaction.type === 'REFUND') {
        if (transaction.method === 'CREDIT_CARD') {
          processCreditCardRefund(transaction);
        } else if (transaction.method === 'PAYPAL') {
          processPayPalRefund(transaction);
        } else if (transaction.method === 'PLAN') {
          processPlanRefund(transaction);
        }
      } else {
        outputError('Invalid transaction type!', transaction);
      }
    }
  }
}

function transactionsAreEmpty(transactions) {
  return !transactions || transactions.length === 0;
}

function outputError(message, transaction) {
  if (transaction) {
    console.log(message, transaction);
  } else {
    console.log(message);
  }
}





















CERTO...












o professor também 

coloca 

1 




function assim, de console.log...





















COM ISSO, FICAMOS COM LEVELS DE ABSTRACTION 




IGUAIS, DENTRO DA FUNCTION...








MAS ISSO AINDA NÃO REMOVEU OS IF STATEMENTS...
















--> CERTO... MAS AINDA ASSIM,

QUANDO O ASSUNTO É 



'EXTRACTING FUNCTIONS',




ISSO NEM SEMPRE SIGNIFICA 



EXTRAIR BOOLEAN CHECKS 

E 
OUTPUT 

DE MESSAGES com 'console.log',


E SIM 



É TAMBÉM O REMOVE DE 


_ESTRUTURAS DE CONTROLE INTEIRAS DE NOSSO CÓDIGO (if-else statements)..





