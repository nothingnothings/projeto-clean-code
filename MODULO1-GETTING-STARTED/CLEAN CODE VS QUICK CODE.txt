








TODOS QUEREMOS COMEÇAR...














--> MAS, ANTES DISSO, DEVEMOS TER PACIÊNCIA..









PQ O WRITE DE CLEAN CODE 



_TOMA TEMPO...















--> E É CLARO QUE VC QUER 

COMEÇAR SEU MELHOR CÓDIGO 

JÁ 

DE INÍCIO...












--> OK.. MAS O PROBLEMA É QUE 

__VC _ SEMPRE __ ENCONTRARÁ 

MANEIRAS DE MELHORAR SEU CÓDIGO,


AO LONGO DO TEMPO...












VC NUNCA VAI ESCREVER SEU MELHOR CÓDIGO POSSÍVEL 


JÁ DE INÍCIO -------> ISSO PQ 

SEU PROJECT 

VAI 

EVOLUIR AO LONGO DO TEMPO..













-. CONFORME SEU PROJECT EVOLUÍ E MUDA,

SEU CÓDIGO 

VAI TER DE MUDAR...













-> É POR ISSO QUE VC SEMPRE DEVE QUESTIONAR SEU 

CÓDIGO ATUAL,


E SEMPRE TENTE MELHORÁ-LO -----> SEMPRE TENTE REFATORAR 

SEU CÓDIGO,

PQ 
O 

REFACTOR 
DO CÓDIGO 

É 

SEU AMIGO 



QUANDO O ASSUNTO É 

ESCREVER CÓDIGO MAIS CLEAN..

















-> PQ QUANDO VC ESCREVE CLEAN CODE,

VC:






1) COMEÇA 1 NOVO PROJECT...







2) PLANEJA AS 'PROJECT FEATURES',

DATA ENTITIES,
 ETC..







 3) QUANDO VC COMEÇA A ESCREVER O CÓDIGO,


 VC VAI ESCREVENDO FEATURE POR FEATURE...









4) MAS AÍ VC ENCONTRA 1 MANEIRA DE MELHORAR SUA FEATURE..






5) E AÍ VC VAI FAZENDO O REFACTOR CONSTANTEMENTE,...









6) ASSIM QUE VC TERMINA DE ESCREVER A PRIMEIRA VERSÃO 

DO SEU CÓDIGO,
VC 
VAI REVISAR, ETC ETC...

















--> É UM PROCESSO ITERATIVO,





VC SEMPRE VAI TER DE REFATORAR SEU CÓDIGO...












--> O REFACTORING PODE SER FRUSTRATING ----> O PROBLEMA É QEU 



REFACTORING É UMA COISA SUPER 

COMUM DE FAZER, DURANTE O DEVELOPMENT -------> VC SALVA TEMPO 

AMANHÃ SE VC 

FAZ 
REFACTOR HOJE...












--> SE VC CONTINUAMENTE MELHORA E QUESTIONA SEU CÓDIGO HOJE,

VC TERÁ CÓDIGO MELHOR AMANHÃ













--> E 1 CODEBASE SÓ SOBREVIVE E CONTINUA MAINTAINABLE 

SE 

_VC __ CONTINUAMENTE A MELHOR E A REFATORA... CASO CONTRÁRIO,

ELA NÃO VAI ENVELHECER BEM...











PRO TIP --> SEMPRE TENTE 


MELHORAR O CÓDIGO,


SEMPRE QUE 


VC 

MUDAR ALGUMA COISA DENTRO DO CÓDIGO -> TENTE ENCONTRAR 




ALGUM LUGAR NO SEU CÓDIGO 


EM QUE 

VC 

CONSIGA 


MELHORAR ALGUMA COISA, ALGUMA FUNCTION, ALGUM NAME,

 ETC...









--> isso vai garantir que sua codebase vai sempre ficar healthy...











--> NUNCA TEMOS TEMPO 

PARA FAZER TUDO CERTO... --> AÍ SOMOS PRESSIONADOS A ESCREVER QUICK CODE,

EM VEZ DE 

CLEAN CODE...











-> MAS SE PLOTTAMOS A QUANTIDADE DE 'CODE OUTPUT',





CONTRA O 'TEMPO' QUE 

NOSSO PROJETO VAI LEVAR...








-> SE ESCREVEMOS APENAS DIRTY CODE,


SEREMOS CAPAZES 
DE 




CRIAR 1 MONTE DE FEATURES INICIALMENTE,

MAS AO LONGO DO TEMPO ISSO VAI 

DECLINAR -> PQ 

FICARÁ 

HARD 

DE 
MAINTAIN --------> E O FIX DE _ BUGS E FEATURES 



FICA CADA VEZ MAIS DIFÍCIL,

AO LONGO DO TEMPO...








-> TEMOS 

MTOS PROJECTS QUE SE TORNARAM UNMAINTAINABLE AO LONGO DO TEMPO...













COM O CLEAN CODE,



VC _ É MAIS 'SLOW'

INICIALMENTE,

MAS MAIS 

TARDE 

VC 
FICA MAIS PRODUTIVO,

PQ 
O 
ADD DE FEATURES É BEM MAIS FÁCIL..








-> É POR ISSO QUE O WRITE DE CLEAN CODE É KEY E MT IMPORTANTE,


E É UMA PRIORIDADE EM QUALQUER PROJECT QUE VC COMEÇAR..